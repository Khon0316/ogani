package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"net/http"
	productController "ogani.com/services/product/controllers/product"
	"os"
	"sync"

	"github.com/gorilla/mux"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"github.com/swaggo/http-swagger"
	_ "ogani.com/services/product/docs" // docs is generated by Swag CLI, you have to import it.

	models "ogani.com/services/product/models"
)

func init() {
	db, err := gorm.Open("postgres", "host=0.0.0.0 port=5432 user=postgres dbname=ogani password=postgres sslmode=disable")
	defer db.Close()
	db.AutoMigrate(&models.ProductType{}, &models.ProductItem{}, &models.ProductBrand{})
	seedData(db)
	if err != nil {
		panic(err)
	}
}

// @title Catalog Swagger API
// @version 1.0
// @description  This is Catalog service
// @termsOfService http://swagger.io/terms/
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /api/v1
func main() {
	r := mux.NewRouter()

	api := r.PathPrefix("/api").Subrouter()
	api.NotFoundHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusNotFound)
	})
	apiV1 := api.PathPrefix("/v1").Subrouter()

	apiV1.HandleFunc("/product/items?pageSize={size}&pageIndex={pageIndex}", productController.Items).Methods("GET")
	apiV1.HandleFunc("/product/items?id={id}", productController.ItemById).Methods("GET")
	apiV1.HandleFunc("/product/items/withname/{name}", productController.ItemsWithName).Methods("GET")
	apiV1.HandleFunc("/product/items/type/{catalogTypeId}/brand/{catalogBrandId}", productController.ItemsByTypeIdAndBrandId).Methods("GET")
	apiV1.HandleFunc("/product/items/type/all/brand/{catalogBrandId}", productController.ItemsByBrandId).Methods("GET")
	apiV1.HandleFunc("/product/catalogtypes", productController.ProductTypes).Methods("GET")
	apiV1.HandleFunc("/product/catalogbrands", productController.ProductBrands).Methods("GET")
	apiV1.HandleFunc("/product/items", productController.UpdateProduct).Methods("PUT")
	apiV1.HandleFunc("/product/items", productController.CreateProduct).Methods("POST")
	apiV1.HandleFunc("/product/{id}", productController.DeleteProduct).Methods("DELETE")

	r.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

	r.Use(mux.CORSMethodMiddleware(apiV1))
	log.Fatal(http.ListenAndServe(":5000", r))
}

func seedData(db *gorm.DB){
	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		var spType models.ProductType
		db.Model(&models.ProductType{}).First(&spType)
		if (spType == models.ProductType{}) {
			// import sample data
			fmt.Println("import sample ProductType data")
			seedProductTypes(db)
		}
		wg.Done()
	}()
	
	go func() {
		var spBrand models.ProductBrand
		db.Model(&models.ProductBrand{}).First(&spBrand)
		if (spBrand == models.ProductBrand{}) {
			// import sample data
			fmt.Println("import sample ProductBrand data")
			seedProductBrands(db)
		}
		wg.Done()
	}()
	wg.Wait()

	var spProduct models.ProductItem
	db.Model(&models.ProductItem{}).First(&spProduct)
	if (spProduct == models.ProductItem{}) {
		// import sample data
		fmt.Println("import sample ProductItem data")
		seedProductItems(db)
	}
}

func seedProductTypes(db *gorm.DB){
	readProductTypesCSV(db)
}

func seedProductBrands(db *gorm.DB){
	readProductBrandsCSV(db)
}

func seedProductItems(db *gorm.DB){
	readProductItemsCSV(db)
}

func readProductTypesCSV(db *gorm.DB){
	f, err := os.Open("./data-sample/ProductTypes.csv")
	if err != nil {
		panic(err)
	}
	r := csv.NewReader(f)
	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		db.Model(&models.ProductType{}).Create(&models.ProductType{
			Type: record[0],
		})
	}
}

func readProductBrandsCSV(db *gorm.DB){
	f, err := os.Open("./data-sample/ProductBrands.csv")
	if err != nil {
		panic(err)
	}
	r := csv.NewReader(f)
	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		db.Model(&models.ProductBrand{}).Create(&models.ProductBrand{
			Brand: record[0],
		})
	}
}

func readProductItemsCSV(db *gorm.DB){
	fmt.Println(db)
	//f, err := os.Open("/data-sample/ProductItems.csv")
	//if err != nil {
	//	panic(err)
	//}
	//r := csv.NewReader(f)
	//for {
	//	record, err := r.Read()
	//	if err == io.EOF {
	//		break
	//	}
	//	db.Model(&models.ProductItem{}).Create(models.ProductItem{
	//
	//	})
	//}
}